---

---

<form class="space-y-4" id="contact-form">
  <div>
    <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
    <input
      type="text"
      name="name"
      id="name"
      required
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
    />
  </div>
  <div>
    <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
    <input
      type="email"
      name="email"
      id="email"
      required
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
    />
  </div>
  <div>
    <label for="subject" class="block text-sm font-medium text-gray-700">Subject</label>
    <input
      type="text"
      name="subject"
      id="subject"
      required
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
    />
  </div>
  <div>
    <label for="message" class="block text-sm font-medium text-gray-700">Message</label>
    <textarea
      name="message"
      id="message"
      required
      rows="4"
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
    ></textarea>
  </div>
  <div class="relative">
    <button
      type="submit"
      class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
      id="submit-button"
    >
      <span id="button-text">Send Message</span>
      <span id="button-spinner" class="hidden ml-2">
        <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      </span>
    </button>
    <p id="form-error" class="mt-2 text-sm text-red-600 hidden"></p>
  </div>
</form>

<script>
  import { Modal } from 'flowbite';
  
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form') as HTMLFormElement | null;
    const submitButton = document.getElementById('submit-button') as HTMLButtonElement | null;
    const buttonText = document.getElementById('button-text') as HTMLSpanElement | null;
    const buttonSpinner = document.getElementById('button-spinner') as HTMLSpanElement | null;
    const formError = document.getElementById('form-error') as HTMLParagraphElement | null;
    
    if (form && submitButton && buttonText && buttonSpinner && formError) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Reset error state
        formError.textContent = '';
        formError.classList.add('hidden');
        
        // Show loading state
        submitButton.disabled = true;
        buttonText.textContent = 'Sending...';
        buttonSpinner.classList.remove('hidden');
        
        try {
          // First, test the API endpoint
          console.log('Testing API endpoint...');
          const testResponse = await fetch('/api/test', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ test: 'test' }),
          });
          
          console.log('Test response status:', testResponse.status);
          const testData = await testResponse.json().catch(() => ({}));
          console.log('Test response data:', testData);
          
          if (!testResponse.ok) {
            throw new Error(`Test API failed with status ${testResponse.status}`);
          }
          
          // If test passes, try the actual contact form submission
          const formData = new FormData(form);
          console.log('Submitting form data:', Object.fromEntries(formData.entries()));
          
          const response = await fetch('/api/contact', {
            method: 'POST',
            body: formData,
          });
          
          console.log('Contact form response status:', response.status);
          const data = await response.json().catch(err => {
            console.error('Failed to parse JSON response:', err);
            return { error: 'Invalid response from server', details: 'Could not parse response' };
          });
          
          console.log('Contact form response data:', data);
          
          if (response.ok) {
            // Close the modal using Flowbite's API
            const modalElement = document.querySelector('#modal-contact') as HTMLElement | null;
            if (modalElement) {
              const modal = new Modal(modalElement);
              modal.hide();
            }
            
            // Show success message
            alert('Message sent successfully! We\'ll get back to you soon.');
            
            // Reset form
            form.reset();
          } else {
            // Show error message
            const errorMessage = data.error || 'Failed to send message';
            const errorDetails = data.details || 'Please try again later.';
            console.error('Error:', errorMessage, errorDetails);
            
            formError.textContent = `${errorMessage}: ${errorDetails}`;
            formError.classList.remove('hidden');
            
            // Scroll to error
            formError.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          }
        } catch (error) {
          console.error('Network error:', error);
          formError.textContent = 'Network error. Please check your connection and try again.';
          formError.classList.remove('hidden');
          formError.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        } finally {
          // Reset button state
          submitButton.disabled = false;
          buttonText.textContent = 'Send Message';
          buttonSpinner.classList.add('hidden');
        }
      });
    }
  });
</script>
